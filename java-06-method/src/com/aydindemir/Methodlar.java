package com.aydindemir;

public class Methodlar {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		ğŸ“Œ Javaâ€™da Metotlar Konu AnlatÄ±mÄ±
//		1. Metot Nedir?
//
//		Metotlar, belirli bir gÃ¶revi yerine getiren kod parÃ§alarÄ±dÄ±r.
//
//		Kod tekrarÄ±nÄ± Ã¶nler, programÄ± daha okunabilir ve bakÄ±mÄ± kolay hale getirir.
//
//		2. Metot TanÄ±mÄ±
//
//		Genel sÃ¶z dizimi:
//
//		eriÅŸimBelirteci geriDonusTipi metodAdi(parametreListesi) {
//		    // Metot gÃ¶vdesi
//		    // Ã‡alÄ±ÅŸacak kodlar
//		    return deger; // (void deÄŸilse)
//		}
//
//		AÃ§Ä±klama:
//
//		eriÅŸimBelirteci â†’ public, private, protected, default
//
//		geriDonusTipi â†’ int, double, String, void vb.
//
//		metodAdi â†’ kÃ¼Ã§Ã¼k harfle baÅŸlamalÄ± (Java naming convention)
//
//		parametreListesi â†’ int a, String b gibi
//
//		return â†’ geri dÃ¶nÃ¼ÅŸ tipi void deÄŸilse kullanÄ±lmalÄ±
//
//		3. Ã–rnek: Parametresiz, Geri DÃ¶nÃ¼ÅŸsÃ¼z Metot
//		public class MetotOrnek {
//		    public static void selamVer() {
//		        System.out.println("Merhaba!");
//		    }
//
//		    public static void main(String[] args) {
//		        selamVer();  // Ã§aÄŸÄ±rma
//		    }
//		}
//
//		4. Parametreli ve Geri DÃ¶nÃ¼ÅŸlÃ¼ Metot
//		public class MetotOrnek {
//		    public static int topla(int a, int b) {
//		        return a + b;
//		    }
//
//		    public static void main(String[] args) {
//		        int sonuc = topla(5, 7);
//		        System.out.println("Toplam: " + sonuc);
//		    }
//		}
//
//		5. Void Metot (geri dÃ¶nÃ¼ÅŸsÃ¼z)
//		public static void yazdir(String isim) {
//		    System.out.println("Merhaba, " + isim);
//		}
//
//		6. Overloading (AÅŸÄ±rÄ± YÃ¼kleme)
//
//		AynÄ± isimli, farklÄ± parametreli metotlar yazÄ±labilir.
//
//		public static int carp(int a, int b) {
//		    return a * b;
//		}
//
//		public static double carp(double a, double b) {
//		    return a * b;
//		}
//
//
//		Ã‡aÄŸrÄ±ldÄ±ÄŸÄ±nda parametre tipine gÃ¶re doÄŸru metot seÃ§ilir.
//
//		7. Static ve Non-Static Metotlar
//
//		static metotlar â†’ sÄ±nÄ±f Ã¼zerinden Ã§aÄŸrÄ±lÄ±r (Ã¶rn. Math.sqrt(16)).
//
//		Non-static metotlar â†’ nesne Ã¼zerinden Ã§aÄŸrÄ±lÄ±r.
//
//		public class Hesap {
//		    public static int kare(int x) {   // static metot
//		        return x * x;
//		    }
//
//		    public int kup(int x) {           // non-static metot
//		        return x * x * x;
//		    }
//
//		    public static void main(String[] args) {
//		        System.out.println(Hesap.kare(5));  // sÄ±nÄ±f Ã¼zerinden
//
//		        Hesap h = new Hesap();
//		        System.out.println(h.kup(5));       // nesne Ã¼zerinden
//		    }
//		}
//
//		8. Recursive (Ã–zyinelemeli) Metot
//
//		Metot kendi kendini Ã§aÄŸÄ±rabilir.
//		Ã–rn: FaktÃ¶riyel hesabÄ±
//
//		public static int faktoriyel(int n) {
//		    if (n == 0) return 1;
//		    return n * faktoriyel(n - 1);
//		}
//
//		9. MetotlarÄ±n AvantajlarÄ±
//
//		âœ… Kod tekrarÄ±nÄ± Ã¶nler
//		âœ… ProgramÄ± modÃ¼ler hale getirir
//		âœ… OkunabilirliÄŸi artÄ±rÄ±r
//		âœ… BakÄ±m ve hata ayÄ±klamayÄ± kolaylaÅŸtÄ±rÄ±r
//
//		ğŸ“Œ Ã–zet
//
//		Javaâ€™da metot tÃ¼rleri:
//
//		Parametresiz, geri dÃ¶nÃ¼ÅŸsÃ¼z
//
//		Parametreli, geri dÃ¶nÃ¼ÅŸsÃ¼z
//
//		Parametresiz, geri dÃ¶nÃ¼ÅŸlÃ¼
//
//		Parametreli, geri dÃ¶nÃ¼ÅŸlÃ¼
//
//		Overloaded (aÅŸÄ±rÄ± yÃ¼klenmiÅŸ)
//
//		Recursive (Ã¶zyinelemeli)

	}

}
